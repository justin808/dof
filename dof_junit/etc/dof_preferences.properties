# Specify the maximum number of DOF Reference objects that are cached
# DOF reference objects are cached to avoid hitting the database when DOF.require is called.
# Default is zero, which is no maximum.
MaxCachedReferenceObjects=0

# Specify the maximum number of DOF Reference objects that are cached.
# DOF scratch objects are cached to avoid hitting the database when DOF.require is called.
# If it is easy to recreate your schema, then it's better to just accumulate scratch objects
# and later recreate the schema. That way you don't wait for cleanup of the scratch objects
# when running your tests. However, you may have a need to track the scratch objects for cleanup.
# Default is zero, which is no maximum.
MaxCachedScratchObjects=0


# Following settings only apply if you are using text definitions of objects, rather than Java definitions

# If you wish to have your own default ScratchPrimaryKeyProvider, specify the class here.
# The default is to use System.currentTimeMillis() + " " + Math.random();
DefaultScratchPrimaryKeyProvider=org.doframework.sample.xml_handler.ProductXmlHandler

# Specify a custom class that implements interface org.doframework.ObjectFileInfoProcessor
# in case your files have a custom naming convention. See Javadoc for that file
# Default handler is org.doframework.TypePkExtensionObjectFileInfoProcessor
# ObjectFileInfoProcessor=org.doframework.TypePkExtensionObjectFileInfoProcessor

# This is the pattern for replacing the PK with the scratch PK
# Use this pattern in your object creation files and when
# Default if not specified is {{pk}} with optional {{pk:myScratchReference}}
# See javadoc for class org.doframework.DOF for info on how the myScratchReference works
# NOTE: This is a regexp, and there must be ONE grouping specified
# Default is ScratchPrimaryKeyPattern=\\{\\{pk(\\:(\\w+))?\\}\\}
# ScratchPrimaryKeyPattern=\\{\\{pk(\\:(\\w+))?\\}\\}

