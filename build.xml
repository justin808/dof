<!--The tasks relevant to building the dof.jar start with "dof"
    All other tasks are part of the sample accounting program which demonstrates
    the proper functioning of the DOF, as well as the use of mock objects
    and a dependency location pattern -->

<project name="DOF" default="compile" basedir=".">

    <!-- Name of project and version -->
    <property name="proj.name"      value="DependentObjectFramework"/>
    <property name="proj.shortname" value="dof"/>
    <property name="version"        value="1.0"/>

    <!-- Global properties for this build -->
    <property name="database.dir"           value="database"/>
    <property name="dof.src.java.dir"           value="dof_src"/>
    <property name="src.java.dir"           value="src"/>
    <property name="src.etc.dir"            value="etc"/>
    <property name="lib.dir"                value="lib"/>
    <property name="class.dir"              value="classes"/>
    <property name="build.dir"              value="build"/>

    <!-- Classpath declaration -->
    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>
        </fileset>
    </path>

    <!-- Useful shortcuts -->
    <patternset id="meta.files">
        <include name="**/*.xml"/>
        <include name="**/*.properties"/>
    </patternset>

    <target name="clean" description="Clean the build directory">
        <delete dir="${class.dir}"/>
        <delete dir="${build.dir}"/>
        <mkdir dir="${class.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="dof.compile">
        <mkdir dir="${class.dir}"/>
        <javac srcdir="${dof.src.java.dir}"
               destdir="${class.dir}"/>
    </target>

    <target name="dof.jar" depends="dof.compile">
        <mkdir dir="${build.dir}"/>
        <jar destfile="${build.dir}/dof.jar">
            <fileset dir="${class.dir}"
                includes="com/ibm/dof/**"/>
        </jar>
    </target>


    <target name="compile">
        <mkdir dir="${class.dir}"/>
        <javac srcdir="${src.java.dir}"
               destdir="${class.dir}"
               classpathref="project.classpath"/>
    </target>


    <!-- Copy metadata to build classpath -->
    <target name="copymetafiles">
        <mkdir dir="${class.dir}"/>
        <copy todir="${class.dir}">
            <fileset dir="${src.java.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
        <copy todir="${class.dir}">
            <fileset dir="${src.etc.dir}">
                <patternset refid="meta.files"/>
            </fileset>
        </copy>
    </target>

    <!-- Run HelloWorld -->
    <!--<target name="run" depends="compile, copymetafiles"-->
            <!--description="Build and run HelloWorld">-->
        <!--<java fork="true"-->
              <!--classname="hello.HelloWorld"-->
              <!--classpathref="project.classpath">-->
            <!--<classpath path="${build.dir}"/>-->
        <!--</java>-->
    <!--</target>-->

    <!-- Hibernate Tools import -->
    <taskdef name="hibernatetool"
             classname="org.hibernate.tool.ant.HibernateToolTask"
             classpathref="project.classpath"/>

    <!-- Export the database schema -->
    <target name="schemaexport" depends="compile, copymetafiles"
            description="Exports a generated schema to DB and file">

        <hibernatetool destdir="${basedir}">
            <classpath path="${class.dir}"/>
            <jpaconfiguration/> <!-- Use META-INF/persistence.xml -->
            <hbm2ddl
                    drop="true"
                    create="true"
                    export="true"
                    outputfilename="${proj.shortname}-ddl.sql"
                    delimiter=";"
                    format="true"/>
        </hibernatetool>
    </target>

    <!-- Start the HSQL DB server -->
    <target name="startdb" description="Run HSQL database server with clean DB">
        <!-- Delete database files -->
        <delete dir="${database.dir}"/>
        <java classname="org.hsqldb.Server"
              fork="yes"
              classpathref="project.classpath"
              failonerror="true">
            <arg value="-database.0"/>
            <arg value="file:${database.dir}/db"/>
        </java>
    </target>

    <!-- Start the HSQL DB browser tool -->
    <target name="dbmanager" description="Start HSQL DB manager">
        <java
                classname="org.hsqldb.util.DatabaseManagerSwing"
                fork="yes"
                classpathref="project.classpath"
                failonerror="true">
            <arg value="-url"/>
            <arg value="jdbc:hsqldb:hsql://localhost/"/>
            <arg value="-driver"/>
            <arg value="org.hsqldb.jdbcDriver"/>
        </java>
    </target>

</project>
